name: Windows Release (GitFlow)

on:
  push:
    branches: [ 'release/*', 'hotfix/*' ]
    tags:     [ 'v*.*.*' ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  compute:
    name: Compute version & changelog
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tag: ${{ steps.meta.outputs.tag }}
      prerelease: ${{ steps.meta.outputs.prerelease }}
      changelog: ${{ steps.meta.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: meta
        shell: bash
        run: |
          set -e
          ref="${GITHUB_REF}"
          ref_name="${GITHUB_REF_NAME}"

          if [[ "$ref" == refs/tags/v* ]]; then
            version="${ref_name#v}"
            tag="$ref_name"
            prerelease="false"
            range_target="$tag"
          else
            if [[ "$ref" == refs/heads/release/* ]]; then
              version="${ref_name#release/}"
            elif [[ "$ref" == refs/heads/hotfix/* ]]; then
              version="${ref_name#hotfix/}"
            else
              echo "Unsupported ref: $ref"
              exit 1
            fi
            tag="v${version}-rc.${GITHUB_RUN_NUMBER}"
            prerelease="true"
            range_target="HEAD"
          fi

          if git describe --tags --abbrev=0 --match 'v[0-9]*' >/dev/null 2>&1; then
            prev_tag="$(git describe --tags --abbrev=0 --match 'v[0-9]*')"
          else
            prev_tag="$(git rev-list --max-parents=0 HEAD | tail -n1)"
          fi

          if [[ "$ref" == refs/tags/v* ]]; then
            range="${prev_tag}..${tag}"
          else
            range="${prev_tag}..${range_target}"
          fi

          echo "version=$version"       >> $GITHUB_OUTPUT
          echo "tag=$tag"               >> $GITHUB_OUTPUT
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT

          log="$(git log --pretty=format:'- %s (%h) â€” %an' $range || true)"
          log="${log:-No changes.}"
          {
            echo 'changelog<<EOF'
            echo "$log"
            echo EOF
          } >> $GITHUB_OUTPUT

  windows:
    name: Build Windows (Installer + Portable)
    needs: compute
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true
      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop
        shell: pwsh
      - name: Flutter pub get
        run: flutter pub get
        shell: pwsh
      - name: Analyze
        run: flutter analyze
        shell: pwsh
      - name: Build Windows (Release)
        run: flutter build windows --release
        shell: pwsh
      - name: Create Windows portable ZIP
        env:
          APP_VERSION: ${{ needs.compute.outputs.version }}
        run: |
          $src = "build\windows\x64\runner\Release"
          if (!(Test-Path $src)) { throw "Windows Release output not found: $src" }
          $destDir = "build\portable"
          New-Item -ItemType Directory -Force -Path $destDir | Out-Null
          $zip = Join-Path $destDir ("TonoMusic-Portable-" + $env:APP_VERSION + ".zip")
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path (Join-Path $src '*') -DestinationPath $zip
        shell: pwsh
      - name: Install Inno Setup
        run: choco install innosetup -y
        shell: pwsh
      - name: Build installer (Inno Setup)
        env:
          APP_VERSION: ${{ needs.compute.outputs.version }}
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "installer\installer.iss"
        shell: pwsh
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ needs.compute.outputs.tag }}
          path: |
            build/installer/*.exe
            build/portable/*.zip
          if-no-files-found: error
          retention-days: 14

  publish:
    name: Create GitHub Release
    needs: [compute, windows]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Create/Upload GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.compute.outputs.tag }}
          name: ${{ needs.compute.outputs.tag }}
          body: ${{ needs.compute.outputs.changelog }}
          prerelease: ${{ needs.compute.outputs.prerelease }}
          files: |
            dist/**/*.exe
            dist/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
